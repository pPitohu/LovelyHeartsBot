const express = require('express');
const { Telegraf, Markup, session } = require('telegraf');
const axios = require('axios');
const mongoose = require('mongoose');
require('dotenv').config();
const animations = require('./animations.js');
const User = require('./models/User');

const app = express();

const bot = new Telegraf(process.env.LovelyHeartsBOT_TOKEN, { polling: true });
const SurpriseNotifier = new Telegraf(process.env.SurpriseNotifierBOT_TOKEN, {
    polling: true,
});

bot.use(session());
SurpriseNotifier.use(session());

function createActionAnimation(name, frames, lastMSG, delay = 350) {
    bot.action(name, async (ctx) => {
        await ctx.answerCbQuery();
        for (let i = 0; i < frames.length; i++) {
            setTimeout(async () => {
                frames[i] = frames[i].replaceAll(' ', '');
                await ctx.editMessageText(frames[i]);
                if (i === frames.length - 1) {
                    if (lastMSG) {
                        setTimeout(
                            async () =>
                                await ctx.editMessageText(
                                    lastMSG,
                                    Markup.inlineKeyboard([
                                        Markup.button.callback(
                                            'üîÑ –ó–∞–Ω–æ–≤–æ üîÑ',
                                            name
                                        ),
                                    ])
                                ),
                            delay * 2
                        );
                    } else {
                        await ctx.editMessageText(
                            frames[i],
                            Markup.inlineKeyboard([
                                Markup.button.callback('üîÑ –ó–∞–Ω–æ–≤–æ üîÑ', name),
                            ])
                        );
                    }
                }
            }, i * delay);
        }
    });
}

const callbackBtn = (text, callback) => Markup.button.callback(text, callback);

SurpriseNotifier.start(async (ctx) => {
    const user = await User.findOne({ chatId: ctx.chat.id });
    if (user) {
        await ctx.reply('–£–∂–µ –∑–∞–ø—É—â–µ–Ω–æ! ‚òëÔ∏è');
        return;
    }
    const newUser = new User({
        human_name: ctx.message.chat.first_name,
        username: ctx.message.chat.username,
        chatId: ctx.message.chat.id,
    });
    newUser
        .save()
        .then(async () => await ctx.reply('‚úÖ –ó–∞–ø—É—â–µ–Ω–æ. –û–∂–∏–¥–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...'))
        .catch((err) =>
            console.log('an error occured in ' + ctx.message.chat.id, err)
        );
});

bot.start(async (ctx) => {
    await ctx.reply(
        `
        <b>–ü—Ä–∏–≤–µ—Ç, –ù–µ–∑–Ω–∞–∫–æ–º–µ—Ü! ‚ô•Ô∏è</b>
        –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏—è—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑ —Ç–≤–æ–µ–º—É –¥—Ä—É–≥—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –±–ª–∏–∑–∫–æ–º—É —á–µ–ª–æ–≤–µ–∫—É.
        –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –¥–µ—Ä–∂–∏ –∫–æ–º–∞–Ω–¥—É: /how <i>(–Ω–∞–∂–º–∏)</i>
        `.replaceAll('  ', ''),
        {
            parse_mode: 'HTML',
            reply_markup: {
                keyboard: [
                    ['–û–±—ã—á–Ω–∞—è'],
                    ['–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –¥—Ä—É–≥–æ–º—É'],
                    ['–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞!'],
                ],
                resize_keyboard: true,
                one_time_keyboard: true,
            },
        }
    );
});

bot.command('how', async (ctx) => {
    await ctx.reply(
        `
        <b>–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?</b>
        –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏—è—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑, –Ω–∞—à–µ–≥–æ –¥—Ä—É–≥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å –Ω–∞ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –µ–º—É —ç—Ç–∏ —Å—é—Ä–ø—Ä–∏–∑—ã.

        <i><b>–ù–µ –≤–æ–ª–Ω—É–π—Å—è, —Ç–≤–æ–π –¥—Ä—É–≥ –Ω–µ —É–∑–Ω–∞–µ—Ç, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å.</b></i>

        –ù–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –æ–Ω –∏–ª–∏ –æ–Ω–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ—Ç–∞: @SurpriseNotifierBot.

        –î–∞–ª–µ–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –¥—Ä—É–≥–æ–º—É", –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–ø–∏—Å–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @ppitohu).
        –í—ã–±—Ä–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∞–Ω–∏–º–∞—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë!

        –¢—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å–º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥—Ä—É–≥—É –∫—Ä–∞—Å–∏–≤—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ <b>(–±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è!)</b>.

        ‚ù§Ô∏è –ë–æ—Ç –∞–∫—Ç—É–∞–ª–µ–Ω –¥–ª—è –≤–ª—é–±–ª–µ–Ω–Ω—ã—Ö ‚ù§Ô∏è
        `.replaceAll('  ', ''),
        { parse_mode: 'HTML' }
    );
});

bot.hears('–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞!', async (ctx) => {
    await ctx.reply(
        `
        <b>–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–º—É –ø–∞—Ä—É —à–µ–π–∫–µ–ª–µ–π –Ω–∞ <a href="https://www.donationalerts.com/r/ppitohu">DonationAlerts</a></b>
        `.replaceAll('  ', ''),
        {
            parse_mode: 'HTML',
            disable_web_page_preview: true,
        }
    );
});

bot.hears('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –¥—Ä—É–≥–æ–º—É', async (ctx) => {
    await ctx.reply('–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ–≥–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–º–µ—Ä: @ppitohu)');
});

animations.forEach((animation) => {
    createActionAnimation(animation.human_name, animation.frames);
    bot.hears(animation.human_name, async (ctx) => {
        try {
            await ctx.reply(
                `–í—ã–±—Ä–∞–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è: ${animation.human_name}`,
                Markup.inlineKeyboard([
                    Markup.button.callback('–ó–∞–ø—É—Å—Ç–∏—Ç—å', animation.human_name),
                ])
            );
        } catch (e) {
            console.log(e);
        }
    });
    bot.action(animation.name, async (ctx) => {
        try {
            await ctx.answerCbQuery();
            ctx.session.sendAnimation.human_name = animation.human_name;
            ctx.session.sendAnimation.name = animation.name;
            await ctx.editMessageText(
                `
                üì¨ –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏:
                
                üï∫ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${ctx.session.sendAnimation.username}
                ü¶Ñ –ê–Ω–∏–º–∞—Ü–∏—è: ${ctx.session.sendAnimation.human_name}
            `.replaceAll('  ', ''),
                Markup.inlineKeyboard([
                    callbackBtn('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', 'sendAnimation'),
                ])
            );
        } catch (e) {
            console.log(e);
        }
    });
});

// –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ -->
bot.on('text', async (ctx) => {
    if (!ctx.message.text.includes('@')) return;
    ctx.session = {
        sendAnimation: {
            name: '',
            human_name: '',
            chatId: '',
            username: '',
        },
    };
    const user = ctx.message.text.trim().replace('@', '');
    const userData = await User.findOne({ username: user });
    if (!userData)
        return await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
    ctx.session.sendAnimation.chatId = userData.chatId;
    ctx.session.sendAnimation.username = user;
    await ctx.reply(
        '‚úÖ–û—Ç–ª–∏—á–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω!\n–í—ã–±–µ—Ä–∏ –∞–Ω–∏–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –µ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.',
        Markup.inlineKeyboard([
            [callbackBtn(animations[0].human_name, animations[0].name)],
        ])
    );
});

bot.action('sendAnimation', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        const user = await User.findOne({
            username: ctx.session.sendAnimation.username,
        });
        user.animation = {
            name: ctx.session.sendAnimation.name,
            frames: animations.find(
                (animation) => animation.name === ctx.session.sendAnimation.name
            ).frames,
            from: ctx.from.username,
        };
        user.save().then(async () => {
            try {
                await SurpriseNotifier.telegram.sendMessage(
                    ctx.session.sendAnimation.chatId,
                    `‚úâÔ∏è –í–∞–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!`,
                    Markup.inlineKeyboard([
                        Markup.button.callback(
                            'üîç–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
                            'checkAnimation'
                        ),
                    ])
                );
                await ctx.editMessageText('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
            } catch (e) {
                await ctx.editMessageText('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –±–æ—Ç–∞ üò¢');
            }
        });
    } catch (e) {
        console.log(e);
    }
});

SurpriseNotifier.action('checkAnimation', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        const user = await User.findOne({ chatId: ctx.chat.id });
        const frames = user.animation.frames;
        for (let i = 0; i < frames.length; i++) {
            setTimeout(async () => {
                frames[i] = frames[i].replaceAll(' ', '');
                await ctx.editMessageText(frames[i]);
                if (i === frames.length - 1) {
                    setTimeout(
                        async () =>
                            await ctx.editMessageText(
                                `–û—Ç–ø—Ä–∞–≤–∏–ª: @${user.animation.from}`
                            ),
                        1000
                    );
                }
            }, i * 350);
        }
    } catch (e) {
        console.log(e);
    }
});

mongoose.connect(
    process.env.DB_NAME,
    {
        useNewUrlParser: true,
    },
    () => console.log('connected to database')
);

const port = process.env.PORT || 5000;

// app.use(express.json());

// app.get('/', (req, res) => {
//     res.status(200).json({ message: 'Hello from the Bot API.' });
// });
// // TELEGRAM WEBHOOK - https://core.telegram.org/bots/api#setwebhook
// app.post(`/${process.env.LovelyHeartsBOT_TOKEN}`, (req, res) => {
//     bot.processUpdate(req.body);
//     res.status(200).json({ message: 'ok' });
// });
// app.post(`/${process.env.SurpriseNotifierBOT_TOKEN}`, (req, res) => {
//     bot.processUpdate(req.body);
//     res.status(200).json({ message: 'ok' });
// });

app.listen(port, () => {
    console.log(`\n\nServer running on port ${port}.\n\n`);
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// app.use(bot.webhookCallback('/callback1'));
// app.use(SurpriseNotifier.webhookCallback('/callback2'));

// const CURRENT_HOST = 'https://lovely-hearts-bot.vercel.app';

// app.get('/', async (_req, res) => {
//     const url1 = `${CURRENT_HOST}/callback1`;
//     const url2 = `${CURRENT_HOST}/callback2`;
//     const webhookUrl1 = await bot.telegram.getWebhookInfo();
//     if (!webhookUrl1) await bot.telegram.setWebhook(url1);
//     const webhookUrl2 = await SurpriseNotifier.telegram.getWebhookInfo();
//     if (!webhookUrl2) await SurpriseNotifier.telegram.setWebhook(url2);
//     res.send(`listening on ${CURRENT_HOST}`);
// });

// app.listen(1234, () => {
//     console.log(`listening on 1234`);
// });
